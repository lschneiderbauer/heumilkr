// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// clarke_wright.cpp
list cpp_clarke_wright(const std::vector<double> & demand, const std::vector<double> & distances, const std::vector<int> & n_res, const std::vector<double> & capacities);
extern "C" SEXP _heumilkr_cpp_clarke_wright(SEXP demand, SEXP distances, SEXP n_res, SEXP capacities) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_clarke_wright(cpp11::as_cpp<cpp11::decay_t<const std::vector<double> &>>(demand), cpp11::as_cpp<cpp11::decay_t<const std::vector<double> &>>(distances), cpp11::as_cpp<cpp11::decay_t<const std::vector<int> &>>(n_res), cpp11::as_cpp<cpp11::decay_t<const std::vector<double> &>>(capacities)));
  END_CPP11
}
// clarke_wright.cpp
list cpp_clarke_wright_stepwise(const std::vector<double> & demand, const std::vector<double> & distances, const std::vector<int> & n_res, const std::vector<double> & capacities);
extern "C" SEXP _heumilkr_cpp_clarke_wright_stepwise(SEXP demand, SEXP distances, SEXP n_res, SEXP capacities) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_clarke_wright_stepwise(cpp11::as_cpp<cpp11::decay_t<const std::vector<double> &>>(demand), cpp11::as_cpp<cpp11::decay_t<const std::vector<double> &>>(distances), cpp11::as_cpp<cpp11::decay_t<const std::vector<int> &>>(n_res), cpp11::as_cpp<cpp11::decay_t<const std::vector<double> &>>(capacities)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_heumilkr_cpp_clarke_wright",          (DL_FUNC) &_heumilkr_cpp_clarke_wright,          4},
    {"_heumilkr_cpp_clarke_wright_stepwise", (DL_FUNC) &_heumilkr_cpp_clarke_wright_stepwise, 4},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_heumilkr(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
